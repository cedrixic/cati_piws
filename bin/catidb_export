#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import os.path as osp
import argparse
from getpass import getpass
from hashlib import md5
from uuid import UUID
import json
from bz2 import BZ2File
import errno
from subprocess import check_call

from catidb_api import get_catidb

default_input = '/neurospin/cati/cati_shared'
default_output = '/neurospin/cati/cati_piws'
default_url = 'https://cati.cea.fr/catidb3'

path_pattern = '{center_uuid}/{subject_uuid}/{time_point}/{modality}/{sequence}/{action_name}_{action_attribute}_{action_id}{extension}'

def build_dest_path(study, action_name, action_attribute, action_id, subject_uuid, time_point, modality,
                    sequence, center_uuid, extension):
    if sequence:
        selected_path_pattern = path_pattern
    else:
        selected_path_pattern = path_pattern.replace('/{sequence}', '')
    return selected_path_pattern.format(
        study=study,
        action_name=action_name,
        action_attribute=action_attribute,
        action_id=action_id,
        subject_uuid=subject_uuid,
        time_point=time_point,
        modality=modality,
        sequence=sequence,
        center_uuid=center_uuid,
        extension=extension)

def sizeof_fmt(num, suffix='B'):
    for unit in ['','Ki','Mi','Gi','Ti','Pi','Ei','Zi']:
        if abs(num) < 1024.0:
            return "%3.2f %s%s" % (num, unit, suffix)
        num /= 1024.0
    return "%.2f %s%s" % (num, 'Yi', suffix)

def catidb_action_to_jasmin(catidb, study, action_name, catidb_action):
    jasmin_action = {
        'types': {},
    }
    ad = catidb.action_attribute_definition(study, 
                                            action_name,
                                            _fields=['parameter', 
                                                     'is_output',
                                                     'trait_type'],
                                            _as_list=True)
    catidb_action.pop('action_id')
    catidb_action.pop('actions_file')
    catidb_action.pop('subject_code', None)
    for parameter, is_output, trait_type in ad:
        parameter = parameter.lower() #TODO: remove when catidb bug is fixed
        jasmin_action['types'][parameter] = trait_type
        xputs = ('outputs' if is_output else 'inputs')
        value = catidb_action.pop(parameter, None)
        if value is not None:
            jasmin_action.setdefault(xputs, {})[parameter] = value
    jasmin_action['attributes'] = catidb_action
    return jasmin_action

description = ('Export an anonymous version of a subset of cati_shared')
parser = argparse.ArgumentParser(
    description=description)

parser.add_argument('-i', '--input', dest='input', default=default_input,
                    help='Input cati_shared directory. Defalut value is "%s"' % default_input)
parser.add_argument('-o', '--output', dest='output', nargs='?', const=default_output, default=None,
                    help='Output directory. Defalut value is "%s"' % default_output)
parser.add_argument('-s', '--study', dest='study', required=True,
                    help='Name of the study to expose.')
parser.add_argument('-t', '--time_point', dest='time_point',
                    help='Select a specific time point. By default all time points are selected.')
parser.add_argument('-m', '--modality', dest='modality',
                    help='Select a specific modality. By default all modalities are selected.')
parser.add_argument('-e', '--sequence', dest='sequence',
                    help='Select a specific sequence. By default all sequences are selected.')
parser.add_argument('-q', '--query', dest='query', action='store_true',
                    help='Query only. Prints information about the selected data.')
parser.add_argument('-l', '--login', dest='login', default=None,
                    help='Login for catidb connection. By default get recorded value according to the URL.')
parser.add_argument('-p', '--password', dest='password', nargs= '?', const='', default=None,
                    help='Password tot connect to catidb. Without argument, ask for a password. By default get recorded value according to the URL.')
parser.add_argument('-u', '--url', dest='url', default=default_url,
                    help='Base URL for catidb services. Defalut value is "%s"' % default_url)
parser.add_argument('-v', '--verbose', dest='verbose', action='store_true',
                    help='Show information on stderr about status of ongoing process')
options = parser.parse_args()


if options.password == '':
    password = getpass('Password for %s: ' % options.url)
else:
    password = options.password

catidb = get_catidb(server=options.url, login=options.login, password=password)
from pprint import pprint

study = options.study
query = {'study': options.study}
for i in ('modality', 'time_point', 'sequence'):
    if getattr(options, i):
        query[i] = getattr(options, i)

action_names = set()
actions_count = 0
jasmin_actions = {}
subjects = {}
time_points = set()
modalities = set()
sequences = set()
centers = {}
file_copy = {}
total_size = 0
count = 0

if options.output:
    study_directory = osp.normpath(osp.abspath(options.output))
    if osp.exists(study_directory):
       if os.listdir(study_directory):
            print >> sys.stderr, 'ERROR: Directory "%s" exists and is not empty. Please choose another output directory.' % study_directory
            sys.exit(1)
    else:
        os.mkdir(study_directory)
if options.verbose:
    print >> sys.stderr, 'Performing query on', options.url
paths = catidb.paths(**query)

if options.verbose:
    print >> sys.stderr, 'Processing query result'
for path_dict in paths:
    try:
        action_name = path_dict.get('generated_by_action')
        if not action_name:
            # Skip files that are not generated by actions (e.g. actions files)
            continue
        action_names.add(action_name)
        action_attribute = path_dict['generated_by_attribute']
        action_id = path_dict['action_id']
        jasmin_action = jasmin_actions.get(action_name,{}).get(str(action_id))
        if not jasmin_action:
            catidb_action = catidb.action_contents(study, 
                                            action_name, 
                                            action_id=action_id)[0]
            jasmin_action = catidb_action_to_jasmin(catidb, study, action_name, catidb_action)
            jasmin_actions.setdefault(action_name,{})[str(action_id)] = jasmin_action
            actions_count += 1
        
        source_path = path_dict.pop('path')
        subject_code = path_dict.pop('subject_code')
        subject_jasmin_action = subjects.get(subject_code)
        if not subject_jasmin_action:
            subject_catidb_action = catidb.call_server_get('%s/subjects' % study, 
                                                           subject_code=subject_code)[0]
            subject_action_id = subject_catidb_action['action_id']
            subject_jasmin_action = catidb_action_to_jasmin(catidb, study, 'subject', subject_catidb_action)
            subjects[subject_code] = subject_jasmin_action
            jasmin_actions.setdefault('subject',{})[str(subject_action_id)] = subject_jasmin_action
        subject_uuid = subject_jasmin_action['inputs']['subject_uuid']
        path_dict['subject_uuid'] = subject_uuid
        jasmin_action['attributes']['subject_uuid'] = subject_uuid
        time_point = path_dict['time_point']
        time_points.add(time_point)
        modality = path_dict.get('modality')
        if not modality:
            print >> sys.stderr, 'WARNING: no modality for', source_path
            modality = 'mri'
        modalities.add(modality)
        sequence = path_dict.get('sequence')
        if sequence:
            sequences.add(sequence)
        center_code = path_dict.pop('center_code')
        jasmin_action['attributes'].pop('center_code', None)
        center_uuid = str(UUID(bytes=md5('%s_%s' % (study, center_code)).digest()))
        path_dict['center_uuid'] = center_uuid
        jasmin_action['attributes']['center_uuid'] = center_uuid
        centers[center_code] = center_uuid
        s = source_path.split('.', 1)
        if len(s) == 2:
            extension = '.' + s[1]
        else:
            extension = ''
        dest_path = build_dest_path(study=study,
                                    action_name=action_name, 
                                    action_attribute=action_attribute,
                                    action_id=action_id,
                                    subject_uuid=subject_uuid, 
                                    time_point=time_point,
                                    modality=modality,
                                    sequence=sequence,
                                    center_uuid=center_uuid,
                                    extension=extension)
        file_copy[source_path] = (dest_path, path_dict)
        total_size += path_dict['size']
    except:
        from pprint import pprint
        pprint(path_dict)
        raise
    count += 1
    if options.verbose:
        if count % 1000 == 0:
            print >> sys.stderr, '{0} paths processed on {1} ({2} subjects, {3} actions)'.format(count, len(paths), len(subjects), actions_count)

if options.verbose:
    print >> sys.stderr, 'Rename file names in actions'
    for action_name in jasmin_actions:
        for action_id in jasmin_actions[action_name]:
            action = jasmin_actions[action_name][action_id]
            for parameter, type in action['types'].items():
                xputs = ('outputs' if parameter in action.get('outputs', {}) else 'inputs')
                try:
                    if type == 'File':
                        path = action[xputs][parameter]
                        if path:
                            new_path = file_copy[path][0]
                            action[xputs][parameter] = new_path
                        else:
                            del action['types'][parameter]
                            continue
                    elif type == 'List_File':
                        paths = action[xputs][parameter]
                        if paths:
                            for i in xrange(len(paths)):
                                path = paths[i]
                                new_path = file_copy[path][0]
                                paths[i] = new_path
                        else:
                            del action['types'][parameter]
                            continue
                except KeyError:
                    from pprint import pprint
                    pprint(action)
                    raise
print actions_count, 'actions'
print len(file_copy), 'files to copy'
print 'Cumulated file size:', sizeof_fmt(total_size)
print len(subjects), ' subjects concerned'
print 'actions names:', ', '.join(action_names)
print 'modalities:', ', '.join(modalities)
print 'sequences:', ', '.join(sequences)
print 'time_points:', ', '.join(time_points)

jasmin_paths = {}
jasmin = {'catidb_piws': {'paths': jasmin_paths,
                          'actions': jasmin_actions}}
if options.output:    
    jasmin_file = osp.join(study_directory, '%s.jasmin' % study)
    if options.verbose:
        print >> sys.stderr, 'Writing jasmin files in', jasmin_file
    for source_path in file_copy:
        dest_path, attributes = file_copy[source_path]
        jasmin_paths[dest_path] = attributes
    json.dump(jasmin, BZ2File(jasmin_file, 'w'))

    directories = set()
    count = 0
    for source_path in file_copy:
        dest_path, attributes = file_copy[source_path]
        dest_path = osp.join(study_directory, dest_path)
        dest_dir = osp.dirname(dest_path)
        if dest_dir not in directories:
            directories_to_create = [dest_dir]
            dest_dir = osp.dirname(dest_dir)
            while len(dest_dir) > len(study_directory) and dest_dir not in directories:
                directories_to_create.insert(0, dest_dir)
                dest_dir = osp.dirname(dest_dir)
            for d in directories_to_create:
                os.mkdir(d)
                directories.add(d)
        source_path = osp.join(options.input, source_path)
        try:
            os.link(source_path, dest_path)
        except OSError as e:
            if e.errno == errno.EPERM:
                # Operation not permited. Source path is probably
                # a directory. Copy it with cp.
                check_call(['cp', '-al', source_path, dest_path])
            else:
                raise
        count += 1
        if options.verbose:
            if count % 1000 == 0:
                print >> sys.stderr, '{0} files copied on {1} ({2} directories created)'.format(count, len(file_copy), len(directories))
            